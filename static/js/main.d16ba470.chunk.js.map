{"version":3,"sources":["useWebSocket.ts","WebSocketHandler.tsx","App.tsx","index.tsx"],"names":["useWebsocket","settings","useState","setReconnectTmsp","useImmer","status","state","setState","socketRef","useRef","setReconnectTmspDebounced","debounce","timestamp","handleOpenEvent","console","info","draft","handleCloseEvent","Date","handleErrorEvent","e","error","String","useEffect","window","current","close","wsUrl","URL","wsEndpoint","securityToken","search","WebSocket","addEventListener","err","removeEventListener","WebSocketHandler","message","setMessage","handleReceivedMessage","ev","a","data","JSON","parse","log","type","msg","App","setSecurityToken","setWsEndpoint","httpEndpoint","setHTTPEndpoint","address","setAddress","getHeaders","isPost","headers","Headers","set","btoa","loadAddress","fetch","then","res","json","catch","account","hoprAddress","sendMessage","method","body","stringify","recipient","name","placeholder","value","onChange","target","onClick","rootElement","document","getElementById","render"],"mappings":"2OAoGeA,EAtFM,SAACC,GAEpB,MAA0CC,qBAA1C,mBAAsBC,GAAtB,WACA,EAA0BC,YAGvB,CAAEC,OAAQ,iBAHb,mBAAOC,EAAP,KAAcC,EAAd,KAKMC,EAAYC,mBAEZC,EAA4BC,oBAAS,SAACC,GAC1CT,EAAiBS,KAChB,KAEGC,EAAkB,WACtBC,QAAQC,KAAK,gBACbR,GAAS,SAACS,GAER,OADAA,EAAMX,OAAS,YACRW,MAILC,EAAmB,WACvBH,QAAQC,KAAK,mBACbR,GAAS,SAACS,GAER,OADAA,EAAMX,OAAS,eACRW,KAETN,GAA2B,IAAIQ,OAG3BC,EAAmB,SAACC,GACxBN,QAAQO,MAAM,WAAYD,GAC1Bb,GAAS,SAACS,GACRA,EAAMX,OAAS,eACfW,EAAMK,MAAQC,OAAOF,MAEvBV,GAA2B,IAAIQ,OA2CjC,OAvCAK,qBAAU,WACR,GAAsB,qBAAXC,OAAX,CAGIhB,EAAUiB,UACZX,QAAQC,KAAK,sBACbP,EAAUiB,QAAQC,MAAM,IAAM,kBAIhC,IACE,IAAMC,EAAQ,IAAIC,IAAI3B,EAAS4B,YAE3B5B,EAAS6B,gBACXH,EAAMI,OAAN,oBAA4B9B,EAAS6B,gBAEvChB,QAAQC,KAAK,mBACbP,EAAUiB,QAAU,IAAIO,UAAUL,GAGlCnB,EAAUiB,QAAQQ,iBAAiB,OAAQpB,GAE3CL,EAAUiB,QAAQQ,iBAAiB,QAAShB,GAE5CT,EAAUiB,QAAQQ,iBAAiB,QAASd,GAC5C,MAAOe,GACPpB,QAAQO,MAAM,iBAAkBpB,EAAS4B,YAI3C,OAAO,WACArB,EAAUiB,UAEfjB,EAAUiB,QAAQU,oBAAoB,OAAQtB,GAC9CL,EAAUiB,QAAQU,oBAAoB,QAASlB,GAC/CT,EAAUiB,QAAQU,oBAAoB,QAAShB,QAEhD,CAAClB,EAAS4B,WAAY5B,EAAS6B,gBAE3B,CACLxB,QACAE,c,OC7DW4B,EA7BV,SAAC,GAAgD,IAA9CP,EAA6C,EAA7CA,WAAYC,EAAiC,EAAjCA,cAClB,EAA8B5B,mBAAS,IAAvC,mBAAOmC,EAAP,KAAgBC,EAAhB,KAEQ9B,EADUR,EAAa,CAAE6B,aAAYC,kBACrCtB,UACF+B,EAAqB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDAC5B,IAEQC,EAAOC,KAAKC,MAAMJ,EAAGE,MAC3B5B,QAAQ+B,IAAI,iBAAkBH,GACZ,YAAdA,EAAKI,MACPR,EAAWI,EAAKK,KAElB,MAAOb,GACPpB,QAAQO,MAAMa,GATY,2CAAH,sDAsB3B,OAVAX,qBAAU,WACR,GAAKf,EAAUiB,QAGf,OAFAjB,EAAUiB,QAAQQ,iBAAiB,UAAWM,GAEvC,WACA/B,EAAUiB,SACfjB,EAAUiB,QAAQU,oBAAoB,UAAWI,MAElD,CAAC/B,EAAUiB,UAEP,+BAAOY,GAAoB,2B,MC5BrB,SAASW,IACtB,MAA8B9C,mBAAS,eAAvC,mBAAOmC,EAAP,KAAgBC,EAAhB,KACA,EAA0CpC,mBAAS,IAAnD,mBAAO4B,EAAP,KAAsBmB,EAAtB,KACA,EAAoC/C,mBAAS,uBAA7C,mBAAO2B,EAAP,KAAmBqB,EAAnB,KACA,EAAwChD,mBAAS,yBAAjD,mBAAOiD,EAAP,KAAqBC,EAArB,KACA,EAA8BlD,mBAAS,IAAvC,mBAAOmD,EAAP,KAAgBC,EAAhB,KAEMC,EAAa,WAAqB,IAApBC,EAAmB,wDAC/BC,EAAU,IAAIC,QAMpB,OALIF,IACFC,EAAQE,IAAI,eAAgB,oBAC5BF,EAAQE,IAAI,iBAAkB,qBAEhCF,EAAQE,IAAI,gBAAiB,SAAWC,KAAK9B,IACtC2B,GAGTlC,qBAAU,WACR,IAAMsC,EAAW,uCAAG,8BAAApB,EAAA,6DACZgB,EAAUF,IADE,SAEIO,MAAM,GAAD,OAAIX,EAAJ,2BAA2C,CACpEM,YAECM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBC,OAAM,SAAChC,GAAD,OAASpB,QAAQO,MAAMa,MANd,OAEZiC,EAFY,OAOlBb,EAAU,OAACa,QAAD,IAACA,OAAD,EAACA,EAASC,aAPF,2CAAH,qDASjBP,MACC,CAAC/B,EAAeqB,IAEnB,IAAMkB,EAAW,uCAAG,sBAAA5B,EAAA,yDACbY,EADa,iEAEZS,MAAM,GAAD,OAAIX,EAAJ,oBAAoC,CAC7CmB,OAAQ,OACRb,QAASF,GAAW,GACpBgB,KAAM5B,KAAK6B,UAAU,CACnBC,UAAWpB,EACXkB,KAAMlC,MAEP6B,OAAM,SAAChC,GAAD,OAASpB,QAAQO,MAAMa,MATd,2CAAH,qDAYjB,OACE,gCACE,gCACE,gDAA2B,IAC3B,uBACEwC,KAAK,aACLC,YAAa9C,EACb+C,MAAO/C,EACPgD,SAAU,SAACzD,GAAD,OACR8B,EAAc9B,EAAE0D,OAAOF,aAI7B,gCACE,kDAA6B,IAC7B,uBACEF,KAAK,eACLC,YAAaxB,EACbyB,MAAOzB,EACP0B,SAAU,SAACzD,GAAD,OACRgC,EAAgBhC,EAAE0D,OAAOF,aAI/B,gCACE,mDAA8B,IAC9B,uBACEF,KAAK,gBACLC,YAAa7C,EACb8C,MAAO9C,EACP+C,SAAU,SAACzD,GAAD,OACR6B,EAAiB7B,EAAE0D,OAAOF,aAIhC,gCACE,mDAA8B,IAC9B,uBACEF,KAAK,eACLE,MAAOvC,EACPsC,YAAatC,EACbwC,SAAU,SAACzD,GAAD,OACRkB,EAAWlB,EAAE0D,OAAOF,aAI1B,wBAAQG,QAAS,kBAAMV,KAAvB,kCACA,uBACA,uBACA,cAAC,EAAD,CAAkBxC,WAAYA,EAAYC,cAAeA,OC3F/D,IAAMkD,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAACnC,EAAD,IAASgC,K","file":"static/js/main.d16ba470.chunk.js","sourcesContent":["/*\n  A react hook.\n  Keeps websocket connection alive, reconnects on disconnections or endpoint change.\n*/\nimport { useImmer } from \"use-immer\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { debounce } from \"debounce\";\n\nexport type ConnectionStatus = \"CONNECTED\" | \"DISCONNECTED\";\nexport type Settings = {\n  wsEndpoint: string;\n  securityToken?: string;\n};\n\nconst useWebsocket = (settings: Settings) => {\n  // update timestamp when you want to reconnect to the websocket\n  const [reconnectTmsp, setReconnectTmsp] = useState<number>();\n  const [state, setState] = useImmer<{\n    status: ConnectionStatus;\n    error?: string;\n  }>({ status: \"DISCONNECTED\" });\n\n  const socketRef = useRef<WebSocket>();\n\n  const setReconnectTmspDebounced = debounce((timestamp: number) => {\n    setReconnectTmsp(timestamp);\n  }, 1e3);\n\n  const handleOpenEvent = () => {\n    console.info(\"WS CONNECTED\");\n    setState((draft) => {\n      draft.status = \"CONNECTED\";\n      return draft;\n    });\n  };\n\n  const handleCloseEvent = () => {\n    console.info(\"WS DISCONNECTED\");\n    setState((draft) => {\n      draft.status = \"DISCONNECTED\";\n      return draft;\n    });\n    setReconnectTmspDebounced(+new Date());\n  };\n\n  const handleErrorEvent = (e: Event) => {\n    console.error(\"WS ERROR\", e);\n    setState((draft) => {\n      draft.status = \"DISCONNECTED\";\n      draft.error = String(e);\n    });\n    setReconnectTmspDebounced(+new Date());\n  };\n\n  // runs everytime \"endpoint\" or \"reconnectTmsp\" changes\n  useEffect(() => {\n    if (typeof window === \"undefined\") return; // We are on SSR\n\n    // disconnect from previous connection\n    if (socketRef.current) {\n      console.info(\"WS Disconnecting..\");\n      socketRef.current.close(1000, \"Shutting down\");\n    }\n\n    // need to set the token in the query parameters, to enable websocket authentication\n    try {\n      const wsUrl = new URL(settings.wsEndpoint);\n\n      if (settings.securityToken) {\n        wsUrl.search = `?apiToken=${settings.securityToken}`;\n      }\n      console.info(\"WS Connecting..\");\n      socketRef.current = new WebSocket(wsUrl);\n\n      // handle connection opening\n      socketRef.current.addEventListener(\"open\", handleOpenEvent);\n      // handle connection closing\n      socketRef.current.addEventListener(\"close\", handleCloseEvent);\n      // handle errors\n      socketRef.current.addEventListener(\"error\", handleErrorEvent);\n    } catch (err) {\n      console.error(\"URL is invalid\", settings.wsEndpoint);\n    }\n\n    // cleanup when unmounting\n    return () => {\n      if (!socketRef.current) return;\n\n      socketRef.current.removeEventListener(\"open\", handleOpenEvent);\n      socketRef.current.removeEventListener(\"close\", handleCloseEvent);\n      socketRef.current.removeEventListener(\"error\", handleErrorEvent);\n    };\n  }, [settings.wsEndpoint, settings.securityToken]);\n\n  return {\n    state,\n    socketRef\n  };\n};\n\nexport default useWebsocket;\n","import React, { useEffect, useState } from \"react\";\nimport useWebsocket from \"./useWebSocket\";\n\nexport const WebSocketHandler: React.FC<{\n  wsEndpoint: string;\n  securityToken: string;\n}> = ({ wsEndpoint, securityToken }): JSX.Element => {\n  const [message, setMessage] = useState(\"\");\n  const websocket = useWebsocket({ wsEndpoint, securityToken });\n  const { socketRef } = websocket;\n  const handleReceivedMessage = async (ev: MessageEvent<string>) => {\n    try {\n      // we are only interested in messages, not all the other events coming in on the socket\n      const data = JSON.parse(ev.data);\n      console.log(\"WebSocket Data\", data);\n      if (data.type === \"message\") {\n        setMessage(data.msg);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    if (!socketRef.current) return;\n    socketRef.current.addEventListener(\"message\", handleReceivedMessage);\n\n    return () => {\n      if (!socketRef.current) return;\n      socketRef.current.removeEventListener(\"message\", handleReceivedMessage);\n    };\n  }, [socketRef.current]);\n\n  return <span>{message ? message : \"You have no messages.\"}</span>;\n};\n\nexport default WebSocketHandler;\n","import { ChangeEvent, useEffect, useState } from \"react\";\nimport WebSocketHandler from \"./WebSocketHandler\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [message, setMessage] = useState(\"Hello world\");\n  const [securityToken, setSecurityToken] = useState(\"\");\n  const [wsEndpoint, setWsEndpoint] = useState(\"ws://localhost:3000\");\n  const [httpEndpoint, setHTTPEndpoint] = useState(\"http://localhost:3001\");\n  const [address, setAddress] = useState(\"\");\n\n  const getHeaders = (isPost = false) => {\n    const headers = new Headers();\n    if (isPost) {\n      headers.set(\"Content-Type\", \"application/json\");\n      headers.set(\"Accept-Content\", \"application/json\");\n    }\n    headers.set(\"Authorization\", \"Basic \" + btoa(securityToken));\n    return headers;\n  };\n\n  useEffect(() => {\n    const loadAddress = async () => {\n      const headers = getHeaders();\n      const account = await fetch(`${httpEndpoint}/api/v2/account/address`, {\n        headers\n      })\n        .then((res) => res.json())\n        .catch((err) => console.error(err));\n      setAddress(account?.hoprAddress);\n    };\n    loadAddress();\n  }, [securityToken, httpEndpoint]);\n\n  const sendMessage = async () => {\n    if (!address) return;\n    await fetch(`${httpEndpoint}/api/v2/messages`, {\n      method: \"POST\",\n      headers: getHeaders(true),\n      body: JSON.stringify({\n        recipient: address,\n        body: message\n      })\n    }).catch((err) => console.error(err));\n  };\n\n  return (\n    <div>\n      <div>\n        <label>WS Endpoint</label>{\" \"}\n        <input\n          name=\"wsEndpoint\"\n          placeholder={wsEndpoint}\n          value={wsEndpoint}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setWsEndpoint(e.target.value)\n          }\n        />\n      </div>\n      <div>\n        <label>HTTP Endpoint</label>{\" \"}\n        <input\n          name=\"httpEndpoint\"\n          placeholder={httpEndpoint}\n          value={httpEndpoint}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setHTTPEndpoint(e.target.value)\n          }\n        />\n      </div>\n      <div>\n        <label>Security Token</label>{\" \"}\n        <input\n          name=\"securityToken\"\n          placeholder={securityToken}\n          value={securityToken}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setSecurityToken(e.target.value)\n          }\n        />\n      </div>\n      <div>\n        <label>Send a message</label>{\" \"}\n        <input\n          name=\"httpEndpoint\"\n          value={message}\n          placeholder={message}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setMessage(e.target.value)\n          }\n        />\n      </div>\n      <button onClick={() => sendMessage()}>Send message to node</button>\n      <br />\n      <br />\n      <WebSocketHandler wsEndpoint={wsEndpoint} securityToken={securityToken} />\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}